package driftdetector

import (
	"fmt"
	"os"
)

// TerraformerStateFile represents the structure of a Terraform state file generated by terraformer.
type TerraformerStateFile struct {
	Resources []*TerraformerResource `json:"resources"`
}

// TerraformerResourceIDToData is a map between a resource's unique id and the terraformer state files unique
// resource data.
type TerraformerResourceIDToData map[string]TerraformerUniqueResourceData

// TerraformerUniqueResourceData is a struct for storing the data definition of a single Terraform State resource instance generated
// by terraformer.
type TerraformerUniqueResourceData struct {
	Module         string
	Type           string
	Name           string
	Provider       string
	AttributesFlat map[string]string
}

// TerraformerResource represents a Terraform resource within a terraformer state file.
type TerraformerResource struct {
	Mode      string                `json:"mode"`
	Module    string                `json:"module"`
	Type      string                `json:"type"`
	Name      string                `json:"name"`
	Provider  string                `json:"provider"`
	Instances []TerraformerInstance `json:"instances"`
}

// TerraformerInstance represents a Terraform resource instance within a state file generated by terraformer.
type TerraformerInstance struct {
	SchemaVersion  int               `json:"schema_version"`
	AttributesFlat map[string]string `json:"attributes_flat"`
}

// loadAllTerraformerStateFiles loads from memory the terraformer state files
func (m *ManagedResourcesDriftDetector) loadAllTerraformerStateFiles() (TerraformerResourceIDToData, error) {

	resources := TerraformerResourceIDToData{}

	fileContent, err := os.ReadFile("current_cloud/terraform.tfstate")
	if err != nil {
		return nil, fmt.Errorf("failed to read state file: %v", err)
	}

	stateFile, err := ParseTerraformerStateFile(fileContent)
	if err != nil {
		return nil, fmt.Errorf("[ParseTerraformerStateFile]%v", err)
	}

	resourcesFromStateFile := m.extractUniqueResourceIDToData(stateFile)

	for resourceID, resourceData := range resourcesFromStateFile {
		resources[resourceID] = resourceData
	}

	return resources, nil
}

// extractUniqueResourceIDToData reformats resource data to pull out the attribute "id" as the unique
// resource identifier.
func (m *ManagedResourcesDriftDetector) extractUniqueResourceIDToData(stateFile TerraformerStateFile) TerraformerResourceIDToData {
	outputIDToData := TerraformerResourceIDToData{}

	for _, resource := range stateFile.Resources {
		for _, instance := range resource.Instances {
			id := fmt.Sprintf("%v.%v", resource.Type, instance.AttributesFlat["id"])

			outputIDToData[id] = TerraformerUniqueResourceData{
				Module:         resource.Module,
				Type:           resource.Type,
				Name:           resource.Name,
				Provider:       resource.Provider,
				AttributesFlat: instance.AttributesFlat,
			}
		}
	}
	return outputIDToData
}
